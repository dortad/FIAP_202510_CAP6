# CARREGAMENTO DE DADOS JSON PARA TABELA ORACLE - VERS√ÉO DICION√ÅRIO
# Este programa l√™ dados do arquivo parametros.json (estrutura de dicion√°rio)
# e os carrega diretamente na tabela Oracle 'parametros'

import json
import os
import oracledb
from datetime import datetime

print("=" * 80)
print("üöÄ SISTEMA DE CARGA: JSON ‚Üí ORACLE DATABASE")
print("Carregando dados do dicion√°rio JSON na tabela Oracle")
print("=" * 80)

# ========== FUN√á√ÉO DE MENU ==========
def exibir_menu():
    """Exibe o menu de op√ß√µes para o usu√°rio"""
    print("\nüìã OP√á√ïES DE EXECU√á√ÉO:")
    print("1. üì• Inserir novos dados (ignora duplicados)")
    print("2. üîÑ Limpar tabela e inserir todos os dados")
    print("3. üìä Apenas verificar dados existentes")
    print("4. üö™ Sair")
    
    while True:
        try:
            escolha = input("\nüéØ Escolha uma op√ß√£o (1-4): ").strip()
            if escolha in ['1', '2', '3', '4']:
                return int(escolha)
            else:
                print("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3 ou 4.")
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrompido pelo usu√°rio")
            return 4

# ========== CONFIGURA√á√ïES DO ORACLE ==========
# Estrutura da tabela Oracle (mesma do manutencao_oracle_paramentros.py):
'''
create table parametros
(   variedade varchar2(10),
    epoca varchar2(10),
    processo varchar2(10), 
    e_rec_m number(3,2),
    g_final_rec number,
    s_rec number(3,2),
    g_to_rec number(3,2),
    l_to_rec number(3,2),
    rho_rec number(3,2),
    d_rec_kg_m number(3,2),
    CONSTRAINT pk_parametros PRIMARY KEY (variedade, epoca, processo)
);
'''

# ========== FUN√á√ÉO PARA CARREGAR DADOS JSON COMO DICION√ÅRIO ==========
def carregar_parametros_como_dicionario():
    """
    Carrega os par√¢metros do arquivo JSON e converte para dicion√°rio
    Chave: combina√ß√£o de Variedade_Epoca_Processo
    Valor: dicion√°rio com todos os dados do par√¢metro
    """
    print("üìã Lendo arquivo parametros.json...")
    
    try:
        arquivo_json = "parametros.json"
        
        with open(arquivo_json, "r", encoding='utf-8') as file:
            lista_original = json.load(file)
            
        # Convertendo lista em dicion√°rio
        dicionario_parametros = {}
        registros_duplicados = 0
        
        for i, param in enumerate(lista_original):
            # Criando chave √∫nica combinando Variedade, Epoca e Processo
            chave = f"{param['Variedade']}_{param['Epoca']}_{param['Processo']}"
            
            # Se a chave j√° existe, adiciona um n√∫mero para torn√°-la √∫nica
            chave_original = chave
            contador = 1
            while chave in dicionario_parametros:
                chave = f"{chave_original}_{contador}"
                contador += 1
                registros_duplicados += 1
            
            # Adiciona o par√¢metro no dicion√°rio
            dicionario_parametros[chave] = param
            
        print(f"‚úÖ Arquivo JSON carregado com sucesso!")
        print(f"üìä Total de registros: {len(dicionario_parametros)}")
        if registros_duplicados > 0:
            print(f"‚ö†Ô∏è  Registros com chaves duplicadas encontrados: {registros_duplicados}")
            
        return dicionario_parametros
        
    except FileNotFoundError:
        print("‚ùå Arquivo parametros.json n√£o encontrado!")
        print("üí° Verifique se o arquivo existe no diret√≥rio pai")
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro ao decodificar JSON: {e}")
        return {}
    except Exception as e:
        print(f"‚ùå Erro inesperado ao carregar JSON: {e}")
        return {}

# ========== FUN√á√ÉO PARA CONECTAR AO ORACLE ==========
def conectar_oracle():
    """Estabelece conex√£o com o banco Oracle"""
    print("\nüîó Conectando ao Oracle Database...")
    
    try:
        # Configura√ß√µes de conex√£o (mesmas do manutencao_oracle_paramentros.py)
        conn = oracledb.connect(
            user='RM567007', 
            password='Fiap#2025', 
            dsn='oracle.fiap.com.br:1521/ORCL'
        )
        
        print("‚úÖ Conex√£o com Oracle estabelecida com sucesso!")
        return conn
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar com Oracle: {e}")
        print("üí° Verifique suas credenciais e conectividade de rede")
        return None

# ========== FUN√á√ÉO PARA LIMPAR TABELA ==========
def limpar_tabela(conn):
    """Remove todos os registros da tabela parametros"""
    print("\nüóëÔ∏è Limpando tabela 'parametros'...")
    
    try:
        cursor = conn.cursor()
        
        # Conta registros antes de limpar
        cursor.execute("SELECT COUNT(*) FROM parametros")
        total_antes = cursor.fetchone()[0]
        
        if total_antes == 0:
            print("‚ÑπÔ∏è Tabela j√° est√° vazia")
            cursor.close()
            return True
            
        # Confirma a limpeza
        print(f"‚ö†Ô∏è Foram encontrados {total_antes} registros na tabela")
        confirma = input("üî• Tem certeza que deseja EXCLUIR TODOS os dados? (S/N): ").strip().upper()
        
        if confirma != 'S':
            print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
            cursor.close()
            return False
            
        # Executa a limpeza
        cursor.execute("DELETE FROM parametros")
        conn.commit()
        
        print(f"‚úÖ Tabela limpa com sucesso! {total_antes} registros removidos")
        cursor.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao limpar tabela: {e}")
        try:
            conn.rollback()
        except:
            pass
        return False

# ========== FUN√á√ÉO PARA MAPEAR DADOS JSON ‚Üí ORACLE ==========
def mapear_dados_para_oracle(param_json):
    """
    Converte os dados do JSON para o formato esperado pela tabela Oracle
    
    Mapeamento de campos:
    JSON ‚Üí Oracle
    Variedade ‚Üí variedade
    Epoca ‚Üí epoca  
    Processo ‚Üí processo
    E_rec_m ‚Üí e_rec_m
    G_final_rec ‚Üí g_final_rec
    s_rec ‚Üí s_rec
    g_to_rec ‚Üí g_to_rec
    L_to_rec ‚Üí l_to_rec
    rho_rec ‚Üí rho_rec
    d_rec_kg_m ‚Üí d_rec_kg_m
    """
    
    # Mapeamento direto dos campos (JSON tem capitaliza√ß√£o diferente)
    try:
        dados_oracle = {
            'variedade': param_json['Variedade'][:10],  # Trunca para VARCHAR2(10)
            'epoca': param_json['Epoca'][:10],          # Trunca para VARCHAR2(10)  
            'processo': param_json['Processo'][:10],    # Trunca para VARCHAR2(10)
            'e_rec_m': float(param_json['E_rec_m']),
            'g_final_rec': int(param_json['G_final_rec']),
            's_rec': float(param_json['s_rec']),
            'g_to_rec': float(param_json['g_to_rec']),
            'l_to_rec': float(param_json['L_to_rec']),  # Nota: JSON usa 'L_to_rec' (mai√∫sculo)
            'rho_rec': float(param_json['rho_rec']),
            'd_rec_kg_m': float(param_json['d_rec_kg_m'])
        }
        
        return dados_oracle
        
    except KeyError as e:
        print(f"‚ùå Campo obrigat√≥rio n√£o encontrado no JSON: {e}")
        return None
    except (ValueError, TypeError) as e:
        print(f"‚ùå Erro na convers√£o de tipos: {e}")
        return None

# ========== FUN√á√ÉO PARA INSERIR DADOS NO ORACLE ==========
def inserir_dados_oracle(conn, dicionario_parametros):
    """Insere todos os dados do dicion√°rio na tabela Oracle"""
    
    print(f"\nüíæ Iniciando inser√ß√£o de {len(dicionario_parametros)} registros...")
    
    cursor = conn.cursor()
    registros_inseridos = 0
    registros_com_erro = 0
    registros_duplicados = 0
    
    # SQL de inser√ß√£o
    sql_insert = """
        INSERT INTO parametros (
            variedade, epoca, processo, e_rec_m, g_final_rec, 
            s_rec, g_to_rec, l_to_rec, rho_rec, d_rec_kg_m
        ) VALUES (
            :variedade, :epoca, :processo, :e_rec_m, :g_final_rec,
            :s_rec, :g_to_rec, :l_to_rec, :rho_rec, :d_rec_kg_m
        )
    """
    
    print("\nüìä Progresso da inser√ß√£o:")
    print("-" * 50)
    
    for i, (chave, param_json) in enumerate(dicionario_parametros.items(), 1):
        try:
            # Mapeia os dados do JSON para o formato Oracle
            dados_oracle = mapear_dados_para_oracle(param_json)
            
            if dados_oracle is None:
                print(f"‚ùå Registro {i:3d}: Erro no mapeamento - {chave}")
                registros_com_erro += 1
                continue
                
            # Executa a inser√ß√£o
            cursor.execute(sql_insert, dados_oracle)
            
            # Mostra progresso a cada 5 registros
            if i % 5 == 0 or i == len(dicionario_parametros):
                print(f"‚úÖ Registro {i:3d}: {dados_oracle['variedade']}-{dados_oracle['epoca']}-{dados_oracle['processo']}")
            
            registros_inseridos += 1
            
        except oracledb.IntegrityError as e:
            # Viola√ß√£o de chave prim√°ria (registro duplicado)
            if "unique constraint" in str(e).lower() or "pk_parametros" in str(e):
                print(f"‚ö†Ô∏è  Registro {i:3d}: Duplicado ignorado - {chave}")
                registros_duplicados += 1
            else:
                print(f"‚ùå Registro {i:3d}: Erro de integridade - {e}")
                registros_com_erro += 1
                
        except Exception as e:
            print(f"‚ùå Registro {i:3d}: Erro inesperado - {e}")
            registros_com_erro += 1
    
    # Confirma as altera√ß√µes
    try:
        conn.commit()
        print(f"\n‚úÖ Transa√ß√£o confirmada (COMMIT realizado)")
    except Exception as e:
        print(f"‚ùå Erro no COMMIT: {e}")
        conn.rollback()
        print("‚Ü∂ ROLLBACK executado")
    
    # Relat√≥rio final
    print("\n" + "=" * 50)
    print("üìä RELAT√ìRIO FINAL DA CARGA")
    print("=" * 50)
    print(f"üì• Total de registros processados: {len(dicionario_parametros)}")
    print(f"‚úÖ Registros inseridos com sucesso: {registros_inseridos}")
    print(f"‚ö†Ô∏è  Registros duplicados (ignorados): {registros_duplicados}")
    print(f"‚ùå Registros com erro: {registros_com_erro}")
    
    if registros_inseridos > 0:
        percentual = (registros_inseridos / len(dicionario_parametros)) * 100
        print(f"üéØ Taxa de sucesso: {percentual:.1f}%")
    
    cursor.close()
    return registros_inseridos

# ========== FUN√á√ÉO PARA VERIFICAR DADOS INSERIDOS ==========
def verificar_dados_inseridos(conn):
    """Verifica e mostra alguns registros inseridos na tabela"""
    
    print(f"\nüîç Verificando dados inseridos na tabela...")
    
    try:
        cursor = conn.cursor()
        
        # Conta total de registros
        cursor.execute("SELECT COUNT(*) FROM parametros")
        total = cursor.fetchone()[0]
        print(f"üìä Total de registros na tabela: {total}")
        
        if total > 0:
            # Mostra os primeiros 5 registros
            cursor.execute("""
                SELECT variedade, epoca, processo, e_rec_m, g_final_rec 
                FROM parametros 
                WHERE ROWNUM <= 5
                ORDER BY variedade, epoca, processo
            """)
            
            resultados = cursor.fetchall()
            print(f"\nüìã Primeiros 5 registros inseridos:")
            print("-" * 70)
            print("Variedade  | √âpoca     | Processo  | E_rec_m | G_final")
            print("-" * 70)
            
            for row in resultados:
                print(f"{row[0]:<10} | {row[1]:<9} | {row[2]:<9} | {row[3]:7.2f} | {row[4]:7d}")
        
        cursor.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar dados: {e}")

# ========== PROGRAMA PRINCIPAL ==========
def main():
    """Fun√ß√£o principal que orquestra todo o processo"""
    
    print(f"üïê In√≠cio do processo: {datetime.now().strftime('%H:%M:%S')}")
    
    # Exibir menu e capturar escolha
    escolha = exibir_menu()
    
    if escolha == 4:
        print("üëã Programa encerrado pelo usu√°rio")
        return True
    
    # 1. Carregar dados do JSON como dicion√°rio
    dict_parametros = carregar_parametros_como_dicionario()
    
    if not dict_parametros:
        print("‚ùå N√£o foi poss√≠vel carregar os dados. Encerrando...")
        return False
    
    # 2. Conectar ao Oracle
    conn = conectar_oracle()
    
    if not conn:
        print("‚ùå N√£o foi poss√≠vel conectar ao Oracle. Encerrando...")
        return False
    
    try:
        # 3. Executar a√ß√£o baseada na escolha do usu√°rio
        if escolha == 1:
            # Inserir novos dados (ignora duplicados)
            print("\nüîÑ Modo: Inser√ß√£o de novos dados")
            registros_inseridos = inserir_dados_oracle(conn, dict_parametros)
            
            if registros_inseridos > 0:
                verificar_dados_inseridos(conn)
                print(f"\nüéâ Processo conclu√≠do com sucesso!")
                print(f"üíæ {registros_inseridos} registros carregados na tabela Oracle")
            else:
                print(f"\n‚ö†Ô∏è Nenhum registro novo foi inserido")
                print("üí° Todos os registros j√° existem na tabela")
                verificar_dados_inseridos(conn)
                
        elif escolha == 2:
            # Limpar tabela e inserir todos os dados
            print("\nüîÑ Modo: Limpar e recarregar todos os dados")
            
            if limpar_tabela(conn):
                registros_inseridos = inserir_dados_oracle(conn, dict_parametros)
                verificar_dados_inseridos(conn)
                
                if registros_inseridos > 0:
                    print(f"\nüéâ Recarga conclu√≠da com sucesso!")
                    print(f"üíæ {registros_inseridos} registros carregados na tabela Oracle")
                else:
                    print(f"\n‚ùå Erro na recarga dos dados")
            else:
                print("‚ùå Recarga cancelada devido ao erro na limpeza")
                
        elif escolha == 3:
            # Apenas verificar dados existentes
            print("\nüîç Modo: Verifica√ß√£o de dados existentes")
            verificar_dados_inseridos(conn)
            print(f"\nüìä Verifica√ß√£o conclu√≠da!")
            
    except Exception as e:
        print(f"‚ùå Erro durante o processo principal: {e}")
        return False
        
    finally:
        # Fechar conex√£o
        try:
            conn.close()
            print(f"üîå Conex√£o com Oracle encerrada")
        except:
            pass
    
    print(f"üïê Fim do processo: {datetime.now().strftime('%H:%M:%S')}")
    return True

# ========== EXECU√á√ÉO ==========
if __name__ == "__main__":
    print("üöÄ INICIANDO SISTEMA DE CARGA JSON ‚Üí ORACLE")
    print("üìÅ Arquivo: carga_json_para_oracle.py")
    print("üéØ Objetivo: Carregar dados de parametros.json na tabela Oracle")
    
    sucesso = main()
    
    if sucesso:
        print("\n" + "=" * 80)
        print("‚úÖ PROCESSO FINALIZADO COM SUCESSO!")
        print("=" * 80)
        print("""
üí° FUNCIONALIDADES DISPON√çVEIS:
1. üì• Inser√ß√£o de novos dados (preserva dados existentes)
2. üîÑ Recarga completa (limpa e reinsere todos os dados)
3. üìä Verifica√ß√£o de dados (apenas consulta, sem altera√ß√µes)

üéØ PR√ìXIMOS PASSOS:
1. Execute manutencao_oracle_paramentros.py para CRUD completo
2. Use a op√ß√£o '2 - Listar Parametros' para ver todos os registros
3. Teste as opera√ß√µes de inser√ß√£o, altera√ß√£o e exclus√£o

üîÑ PARA NOVA EXECU√á√ÉO:
- Op√ß√£o 1: Ignora registros duplicados
- Op√ß√£o 2: Remove todos e reinsere (cuidado!)
- Op√ß√£o 3: Apenas visualiza dados atuais
        """)
    else:
        print("\n" + "=" * 80)
        print("‚ùå PROCESSO FINALIZADO COM PROBLEMAS!")
        print("=" * 80)
        print("""
üí° POSS√çVEIS CAUSAS:
1. Arquivo parametros.json n√£o encontrado no diret√≥rio atual
2. Problemas de conex√£o com Oracle Database
3. Credenciais inv√°lidas ou expiradas
4. Tabela 'parametros' n√£o existe no schema

üîß SOLU√á√ïES RECOMENDADAS:
1. Verifique se parametros.json est√° no mesmo diret√≥rio
2. Teste conectividade: ping oracle.fiap.com.br
3. Valide credenciais RM567007 no Oracle
4. Execute o CREATE TABLE da estrutura comentada no c√≥digo
5. Execute manutencao_oracle_paramentros.py para validar ambiente
        """)
    
    input("\n‚è∏Ô∏è  Pressione Enter para finalizar...")